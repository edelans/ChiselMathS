{"body":"# MathBookApp\r\n===========\r\n\r\na PhoneGap based framework to create math class book apps\r\n\r\nNeeds some cleaning up...\r\n\r\nThe framework uses : PhoneGap, jQuery, Graph.tk, Quo.js, SwipeJS, Font-Awesome, MathJax, JSXGraph, tuktuk, LESS (for now)\r\n\r\n## Beginning of the API : \r\n\r\nFor the pinch-to-reveal function : \r\n<p class=\"pincher\"></p>\r\n            <div class=\"pincher\"></div>\r\n            <div class=\"pinched\">\r\n                <div class='swipe'>\r\n                    <ul>\r\n                        <li style='display:block'><div> </div></li>\r\n                        <li style='display:none'><div> </div></li>\r\n                        <li style='display:none'><div> </div></li>\r\n                        <li style='display:none'><div> </div></li>\r\n                        <li style='display:none'><div> </div></li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n\r\nPutting an \"exo\" class to the div.pincher will make it red, and will add a little pencil icon.\r\nFor the graph.tk iframe, insert your function after the #, just like in the graph.tk website :\r\n\r\n            <iframe class=\"graphtk\" src=\"../../graph.html#e^x\"> </iframe>\r\n            \r\nFor MathJax, use the $ just like in LaTeX. \r\n\r\nFor the headlines, just use the h2, h3 and h4 tags, which will appear just like \\section, \\subsection and \\subsubsection in LaTeX.\r\nPutting a\r\n\r\n                        <div id=\"toc\"></div>\r\n            \r\nafter the title will output a table of content.\r\n\r\n\r\nTODO :\r\n\r\n- Adapt Khan-Exercices to pure JS\r\n- CLEAN UP\r\n- Try on Android\r\n- Customize the CSS for the iPad\r\n\r\nA few demos \r\nhttp://db.tt/mpEfJMaw\r\n\r\n\r\n# Français\r\n\r\nCette structure permet la construction rapide d'un cours de math/physique avec exercices, sur toutes les plateformes dotées du support du HTML5. Elle emprunte l'esthétique TeX en y ajoutant des modules comme des graphiques interactifs graph.tk ou JSXGraph (compatibilité Geogebra).\r\nQuelques fonctions sont opérationnelles : \r\n\r\n\r\nLa fonction pinch-to-reveal qui permet de révéler un élément en écartant des doigts un autre. Il suffit de placer une classe ’pincher’ de cette façon : \r\n<p class=\"pincher\"></p>\r\n            <div class=\"pincher\"></div>\r\n            <div class=\"pinched\">\r\n                <div class='swipe'>\r\n                    <ul>\r\n                        <li style='display:block'><div> </div></li>\r\n                        <li style='display:none'><div> </div></li>\r\n                        <li style='display:none'><div> </div></li>\r\n                        <li style='display:none'><div> </div></li>\r\n                        <li style='display:none'><div> </div></li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n\r\nOn peut rajouter une classe ’exo’ au ’pincher’ pour signaler un petit exercice de compréhension.\r\n\r\nPour les titres, on peut utiliser les balises h2,h3 et h4 qui sont numérotées et indexées si on laisse une balise\r\n\r\n                        <div id=\"toc\"></div>\r\n            \r\naprès le titre h1. \r\n\r\nPour rajouter un graphique graph.tk, on rajoute un simple iframe, avec la fonction après le # :\r\n\r\n                     <iframe class=\"graphtk\" src=\"../../graph.html#e^x\"> </iframe>\r\n\r\nPour les maths, grâce à MathJax, on utilise le $, comme dans TeX.\r\n\r\nTODO : \r\n- Il faut nettoyer et simplifier le code.\r\n- Nettoyer le tableu de variations, et le rendre facile à coder.\r\n- Ajouter le moteur d'Algobox, pour faire tourner les algorithmes en JS\r\n\r\n\r\nQuelques démos :\r\nhttp://db.tt/mpEfJMaw\r\n","tagline":"A PhoneGap Based Framework for math book apps","name":"Math Book App Framework","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}